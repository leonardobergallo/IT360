// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  orders        Order[]
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  category    Category @default(HARDWARE)
  stock       Int      @default(0)
  image       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orderItems  OrderItem[]
}

model Service {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  category    ServiceCategory
  duration    String?  // "2-3 horas", "1 d√≠a", etc.
  image       String?  // URL de la imagen del servicio
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orderItems  OrderItem[]
}

model Order {
  id          String      @id @default(cuid())
  userId      String?
  customerName String
  customerEmail String
  customerPhone String
  status      OrderStatus @default(PENDING)
  total       Float
  notes       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User?       @relation(fields: [userId], references: [id])
  orderItems  OrderItem[]
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String?
  serviceId String?
  quantity  Int      @default(1)
  price     Float
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product? @relation(fields: [productId], references: [id])
  service   Service? @relation(fields: [serviceId], references: [id])
}

enum Role {
  USER
  ADMIN
}

enum Category {
  HARDWARE
  PERIPHERALS
  NETWORK
  SOFTWARE
  OTHER
}

enum ServiceCategory {
  TECHNICAL_SUPPORT
  NETWORK_SETUP
  SOFTWARE_DEVELOPMENT
  WEB_DESIGN
  MAINTENANCE
  OTHER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  REEMBOLSO
}
